aes(
x = x_var,
y = result,
fill = grouped_var
)
) +
geom_bar(
stat = 'identity',
width = 0.75,
position = 'fill'
) +
geom_text(
aes(
label = percent_label,
color = grouped_var
),
position = position_fill(vjust = 0.5),
family = 'flama',
size = percent_size
) +
coord_flip() +
scale_color_manual(
guide = F,
values = colors
) +
scale_fill_manual(
guide = guide_legend(reverse = TRUE),
values = rev(fills)
) +
theme_minimal() +
theme(
axis.title = element_blank(),
panel.grid = element_blank(),
axis.text.y = element_text(size = 12),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.position = 'top'
) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 50, simplify = FALSE), paste, collapse="\n"))
}
#Colors / Fonts
font_add(
family='flama',
regular='Flama-Medium.otf',
bold='Flama-Bold.otf'
)
font_type <- theme(text=element_text(family='flama'))
showtext_auto()
green <- '#4C731E'
blue <- '#1E4C73'
grey <- '#666666'
region_colors <- c(
'#FFA59A', #1, red
'#AAcc90', #2, green
'#a8abc6', #3, blue
'#f5d69b' #4, yellow/orange
)
district1 <- '#FFA59A' #1, red
district2 <- '#AAcc90' #2, green
district3 <- '#a8abc6' #3, blue
district4 <- '#f5d69b' #4, yellow/orange
div5fill <- c(
'#4C731E',
'#8FA872',
'#D2DCC7',
'#728FA8',
'#1E4C73'
)
div5col <- c(
'#4C731E',
'#4C731E',
'#4C731E',
'#1E4C73',
'#1E4C73'
)
div5lab <- c(
'white',
'white',
'#666666',
'white',
'white'
)
div5fill2 <- c(
'#1E4C73',
'#728FA8',
'#D2DCC7',
'#8FA872',
'#4C731E'
)
div5fill3 <- c(
'#1E4C73',
'#728FA8',
'#AAADA7',
'#8FA872',
'#4C731E'
)
div5col2 <- c(
'#1E4C73',
'#1E4C73',
'#4C731E',
'#4C731E',
'#4C731E'
)
sca5fill <- c(
'#4C731E',
'#799656',
'#A6B98F',
'#D2DCC7',
'#E9EDE3'
)
sca5col <- c(
'#4C731E',
'#4C731E',
'#4C731E',
'#4C731E',
'#4C731E'
)
bar1_hor <- function(
data = frequencies,
result = frequencies$result,
label = frequencies$label,
percent_label = frequencies$percent_label,
spaces = 100,
percent_size = 10,
color1 = green,
nudge = -.35
) {
chart <- ggplot(
frequencies,
aes(
x = label,
y = result,
fill = color1,
color = color1
)
) +
geom_bar(
stat = "identity",
width = .75,
position = position_dodge(width = .9)
) +
geom_text(
aes(
label = percent_label
),
family = "flama",
position = position_dodge(width = .9),
hjust = nudge,
size = percent_size
) +
scale_fill_manual(
values = c(color1)
) +
scale_color_manual(
guide = FALSE,
values = c(color1)
) +
scale_y_percent(
limits = c(0, max(frequencies$result) + ifelse(max(frequencies$result) > .5, .12, .07))
) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = spaces, simplify = FALSE), paste, collapse="\n")) +
theme_minimal() +
theme( legend.text = element_text(size = 12),
axis.text = element_text(size = 14),
panel.grid = element_blank(),
axis.title = element_blank(),
legend.title = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 12),
legend.position = "none"
) +
coord_flip()
}
groupedbar <- function(
data = frequencies,
result = frequencies$result,
label = frequencies$label,
source = frequencies$group_var,
percent_label = frequencies$percent_label,
spaces = 10,
percent_size = 10,
axis_text_size = 12
) {
chart <- ggplot(
frequencies,
aes(
x = label,
y = result,
group = source
)
) +
geom_bar(
aes(
fill = source
),
stat = "identity",
width = .75,
position = position_dodge(width = .9)
) +
geom_text(
aes(
label = percent_label,
color = source
),
family = "flama",
position = position_dodge(width = .9),
vjust = -.5,
size = percent_size
) +
scale_fill_manual(
values = region_colors
) +
scale_color_manual(
guide = FALSE,
values = region_colors
) +
scale_y_percent(
limits = c(0, max(frequencies$result) + ifelse(max(frequencies$result) > .5, .12, .07))
) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = spaces, simplify = FALSE), paste, collapse="\n")) +
theme_minimal() +
theme( legend.text = element_text(size = 12),
axis.text = element_text(size = axis_text_size),
panel.grid = element_blank(),
axis.title = element_blank(),
legend.title = element_blank(),
axis.text.y = element_blank(),
strip.text = element_text(size = 12),
legend.position = "top"
)
}
groupedbar_hor <- function(
data = frequencies,
result = frequencies$result,
label = frequencies$label,
source = frequencies$group_var,
percent_label = frequencies$percent_label,
spaces = 100,
percent_size = 10,
axis_text_size = 12,
colors = region_colors,
nudge = -.35
) {
chart <- ggplot(
frequencies,
aes(
x = label,
y = result,
group = source
)
) +
geom_bar(
aes(
fill = source
),
stat = "identity",
width = .75,
position = position_dodge(width = .9)
) +
geom_text(
aes(
label = percent_label,
color = source
),
family = "flama",
position = position_dodge(width = .9),
hjust = nudge,
size = percent_size
) +
scale_fill_manual(
values = colors
) +
scale_color_manual(
guide = FALSE,
values = colors
) +
scale_y_percent(
limits = c(0, max(frequencies$result) + ifelse(max(frequencies$result) > .5, .12, .07))
) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = spaces, simplify = FALSE), paste, collapse="\n")) +
theme_minimal() +
theme( legend.text = element_text(size = 12),
axis.text = element_text(size = axis_text_size),
panel.grid = element_blank(),
axis.title = element_blank(),
legend.title = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 12),
legend.position = "top"
) +
guides(fill = guide_legend(reverse = T)) +
coord_flip()
}
names <- names(responses) %>% as_tibble()
names <- as_tibble(names(responses))
#### Function documentation ####
ls('package:orderlabel') #look at all functions in package
?order_label
?order_same
?other_rm
?topline
?read_excel_allsheets
#### Test if no label ####
#ungrouped
frequencies <- ungrouped_freqs %>%
select(
variable,
result
) %>%
order_label(
label_var = variable
)
chart <- bar1()
chart
#grouped
frequencies <- grouped_freqs %>%
select(
district,
variable,
result
) %>%
order_label(
group_var = district,
label_var = variable
)
chart <- groupedbar()
chart
#### Testing function ungrouped ####
rm(frequencies)
frequencies <- ungrouped_freqs %>%
order_label(
#horizontal = T,
#inherent_order_label = T,
#rev_label = T,
#label_specific = 'Two',
# label_var = stat
)
chart <- bar1()
#chart <- bar1_hor()
chart
ggchart_save('test')
#### Testing with grouped variables ####
rm(frequencies)
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
#inherent_order_label = T,
#inherent_order_group = T,
#rev_label = T,
#rev_group = T,
#label_specific = 'Two',
#group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
ggchart_save('test')
#### Testing Stacked bars ####
rm(frequencies)
frequencies <- responses %>%
filter(district == 'District 1') %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
mutate(
variable = NA
) %>%
order_label(
#inherent_order_label = T
stacked = T,
#rev_label = T
)
chart <- bar1()
chart
chart <- stacked_bar(
x_var = frequencies$variable
)
chart
ggchart_save('test')
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
mutate(
variable = NA
) %>%
order_label(
group_var = district,
stacked = T,
#inherent_order_group = T,
#rev_group = T,
#rev_label = T
group_specific = 'District 3'
)
chart <- stacked_bar()
chart
ggchart_save('test')
### top2box
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
mutate(
variable = NA
) %>%
order_label(
group_var = district,
inherent_order_label = T,
top2box = T,
stacked = T
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
mutate(
variable = NA
) %>%
order_label(
group_var = district,
stacked = T,
#inherent_order_group = T,
#rev_group = T,
#rev_label = T
group_specific = 'District 3'
)
chart <- stacked_bar()
chart
ggchart_save('test')
### top2box
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
mutate(
variable = NA
) %>%
order_label(
group_var = district,
inherent_order_label = T,
top2box = T,
stacked = T
)
chart <- stacked_bar()
chart
### top2box
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
mutate(
variable = NA
) %>%
order_label(
group_var = district,
inherent_order_label = T,
top2box = T,
stacked = T,
rev_label = T
)
chart <- stacked_bar()
chart
?select
?mutate
?mutate
?gather
?arrange
?str_c
?fct_inorder
?as_vector
?group_names
group_names
??group_names
?ungroup
?group_vars
?as.symbol
?levels
?any
?names
library(devtools)
library(roxygen2)
#Process documentation
setwd('~/Documents/GitHub/orderlabel/man/')
document()
devtools::install_github('nick-moffitt/orderlabel')
#devtools::install_github('nick-moffitt/orderlabel')
library(orderlabel)
