'#1E4C73',
'#728FA8',
'#AAADA7',
'#8FA872',
'#4C731E'
)
div5col2 <- c(
'#1E4C73',
'#1E4C73',
'#4C731E',
'#4C731E',
'#4C731E'
)
sca5fill <- c(
'#4C731E',
'#799656',
'#A6B98F',
'#D2DCC7',
'#E9EDE3'
)
sca5col <- c(
'#4C731E',
'#4C731E',
'#4C731E',
'#4C731E',
'#4C731E'
)
bar1_hor <- function(
data = frequencies,
result = frequencies$result,
label = frequencies$label,
percent_label = frequencies$percent_label,
spaces = 100,
percent_size = 10,
color1 = green,
nudge = -.35
) {
chart <- ggplot(
frequencies,
aes(
x = label,
y = result,
fill = color1,
color = color1
)
) +
geom_bar(
stat = "identity",
width = .75,
position = position_dodge(width = .9)
) +
geom_text(
aes(
label = percent_label
),
family = "flama",
position = position_dodge(width = .9),
hjust = nudge,
size = percent_size
) +
scale_fill_manual(
values = c(color1)
) +
scale_color_manual(
guide = FALSE,
values = c(color1)
) +
scale_y_percent(
limits = c(0, max(frequencies$result) + ifelse(max(frequencies$result) > .5, .12, .07))
) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = spaces, simplify = FALSE), paste, collapse="\n")) +
theme_minimal() +
theme( legend.text = element_text(size = 12),
axis.text = element_text(size = 14),
panel.grid = element_blank(),
axis.title = element_blank(),
legend.title = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 12),
legend.position = "none"
) +
coord_flip()
}
groupedbar <- function(
data = frequencies,
result = frequencies$result,
label = frequencies$label,
source = frequencies$group_var,
percent_label = frequencies$percent_label,
spaces = 10,
percent_size = 10,
axis_text_size = 12
) {
chart <- ggplot(
frequencies,
aes(
x = label,
y = result,
group = source
)
) +
geom_bar(
aes(
fill = source
),
stat = "identity",
width = .75,
position = position_dodge(width = .9)
) +
geom_text(
aes(
label = percent_label,
color = source
),
family = "flama",
position = position_dodge(width = .9),
vjust = -.5,
size = percent_size
) +
scale_fill_manual(
values = region_colors
) +
scale_color_manual(
guide = FALSE,
values = region_colors
) +
scale_y_percent(
limits = c(0, max(frequencies$result) + ifelse(max(frequencies$result) > .5, .12, .07))
) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = spaces, simplify = FALSE), paste, collapse="\n")) +
theme_minimal() +
theme( legend.text = element_text(size = 12),
axis.text = element_text(size = axis_text_size),
panel.grid = element_blank(),
axis.title = element_blank(),
legend.title = element_blank(),
axis.text.y = element_blank(),
strip.text = element_text(size = 12),
legend.position = "top"
)
}
groupedbar_hor <- function(
data = frequencies,
result = frequencies$result,
label = frequencies$label,
source = frequencies$group_var,
percent_label = frequencies$percent_label,
spaces = 100,
percent_size = 10,
axis_text_size = 12,
colors = region_colors,
nudge = -.35
) {
chart <- ggplot(
frequencies,
aes(
x = label,
y = result,
group = source
)
) +
geom_bar(
aes(
fill = source
),
stat = "identity",
width = .75,
position = position_dodge(width = .9)
) +
geom_text(
aes(
label = percent_label,
color = source
),
family = "flama",
position = position_dodge(width = .9),
hjust = nudge,
size = percent_size
) +
scale_fill_manual(
values = colors
) +
scale_color_manual(
guide = FALSE,
values = colors
) +
scale_y_percent(
limits = c(0, max(frequencies$result) + ifelse(max(frequencies$result) > .5, .12, .07))
) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = spaces, simplify = FALSE), paste, collapse="\n")) +
theme_minimal() +
theme( legend.text = element_text(size = 12),
axis.text = element_text(size = axis_text_size),
panel.grid = element_blank(),
axis.title = element_blank(),
legend.title = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 12),
legend.position = "top"
) +
guides(fill = guide_legend(reverse = T)) +
coord_flip()
}
names <- names(responses) %>% as_tibble()
names <- as_tibble(names(responses))
group_forward <- tibble::tibble(
label = c(rep('One', 4), rep('Two', 4)),
result = rep(.2, 8),
n = rep(100, 8),
group_var = rep(c('One', 'Two', 'Three', 'Four'), 2)
) %>% factors(grouped = T, group_var = group_var, label_var = label)
#### ***** Hidden order_label Functions ***** ####
#### Blank values ####
blank_values <- function(
dataset
){
#If no value, add in place filler
if(
any(names(dataset) == 'value') == F
) {
dataset$value <- 'x'
} else{
dataset <- dataset
}
#If no label, add in place filler
if(
any(names(dataset) == 'label') == F
) {
dataset$label <- 'x'
} else{
dataset <- dataset
}
return(dataset)
}
#### Add label ####
add_label <- function(
dataset,
label_var
){
dataset <- blank_values(dataset)
label_var_flag <- dplyr::enquo(label_var)
dataset <- dataset %>%
dplyr::mutate(
label = !!label_var_flag
)
}
#### Add group ####
add_group <- function(
dataset,
grouped,
group_var,
label_var
){
#Frequencies with a grouping variable must be grouped for following section
if(grouped == T){
label_var_flag <- dplyr::enquo(label_var)
dataset <- add_label(dataset, !!label_var_flag)
group_var_flag <- dplyr::enquo(group_var)
dataset <- dataset %>%
dplyr::ungroup() %>%
dplyr::mutate(
group_var = !!group_var_flag
) %>%
dplyr::group_by(
group_var
)
} else{
label_var_flag <- dplyr::enquo(label_var)
dataset <- add_label(dataset, !!label_var_flag)
}
}
#### Factors ####
#When inherent_order == T, labels are ordered by value #s
#But factored variables won't have #s in value column. Let's give them some
factors <- function(
dataset,
grouped,
group_var,
label_var
){
label_var_flag <- dplyr::enquo(label_var)
group_var_flag <- dplyr::enquo(group_var)
dataset <- add_group(dataset, grouped, !!group_var_flag, !!label_var_flag)
#When "value" is factored, value needs to be changed to .number
#When "value" was completely missing or all the same, values needs to be changed to distinct .number
if(dataset$value == dataset$label |
length(unique(dataset$value)) == 1 |
dataset$value[1] != '1'
){
max_lab <- length(unique(dataset$label))
dataset <- dataset %>%
dplyr::mutate(
value = 1:max_lab
)
} else {
dataset <- dataset
}
#Now convert value to numeric for inherent_orders
dataset <- dataset %>%
dplyr::mutate(
value = gsub("[^0-9.]", "", value) %>% as.character() %>% as.numeric()
)
return(dataset)
}
#### Reverse label inherent order ####
reverse_label <- function(
dataset,
grouped,
group_var,
label_var,
rev_label = F
) {
label_var_flag <- dplyr::enquo(label_var)
group_var_flag <- dplyr::enquo(group_var)
dataset <- factors(dataset, grouped, !!group_var_flag, !!label_var_flag)
if(rev_label == T){
max_val <- max(dataset$value)
min_val <- min(dataset$value)
dataset <- dataset %>%
dplyr::mutate(
value = plyr::mapvalues(
value,
from = c(min_val:max_val),
to = c(max_val:min_val)
)
)
} else {
dataset <- dataset
}
}
#### Reverse label unordered ####
reverse_label_unordered <- function(
dataset,
rev_label
){
if(rev_label == T){
dataset <- dataset %>%
dplyr::arrange(
label = forcats::fct_inorder(label)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(label)
) %>%
dplyr::arrange(
label = forcats::fct_rev(label)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(label),
label = as.character.factor(label)
)
} else {
dataset <- dataset
}
}
group_forward <- tibble::tibble(
label = c(rep('One', 4), rep('Two', 4)),
result = rep(.2, 8),
n = rep(100, 8),
group_var = rep(c('One', 'Two', 'Three', 'Four'), 2)
) %>% factors(grouped = T, group_var = group_var, label_var = label)
purrr::as_vector(group_forward$group_var)
group_backward <- tibble::tibble(
label = c(rep('One', 4), rep('Two', 4)),
result = rep(.2, 8),
n = rep(100, 8),
group_var = rep(c('One', 'Two', 'Three', 'Four'), 2)
) %>% factors(grouped = T, group_var = group_var, label_var = label) %>%
reverse_group(rev_group = T)
#### Reverse Group ####
reverse_group <- function(
dataset,
rev_group
){
if(rev_group == T){
dataset <- dataset %>%
dplyr::arrange(
group_var = forcats::fct_inorder(group_var)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var)
) %>%
dplyr::arrange(
group_var = forcats::fct_rev(group_var)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var),
group_var = as.character.factor(group_var)
)
} else {
dataset <- dataset
}
}
#### Reverse label unordered pt 2 ####
reverse_label_unordered2 <- function(
dataset,
rev_label
){
if(rev_label == T){
dataset <- dataset %>%
dplyr::arrange(
group_var = forcats::fct_inorder(group_var)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var)
) %>%
dplyr::arrange(
group_var = forcats::fct_rev(group_var)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var),
group_var = as.character.factor(group_var)
)
} else {
dataset <- dataset
}
}
group_backward <- tibble::tibble(
label = c(rep('One', 4), rep('Two', 4)),
result = rep(.2, 8),
n = rep(100, 8),
group_var = rep(c('One', 'Two', 'Three', 'Four'), 2)
) %>% factors(grouped = T, group_var = group_var, label_var = label) %>%
reverse_group(rev_group = T)
group_forward <- tibble::tibble(
label = c(rep('One', 4), rep('Two', 4)),
result = rep(.2, 8),
n = rep(100, 8),
group_var = rep(c('One', 'Two', 'Three', 'Four'), 2)
) %>% factors(grouped = T, group_var = group_var, label_var = label)
purrr::as_vector(group_forward$group_var)
group_backward <- tibble::tibble(
label = c(rep('One', 4), rep('Two', 4)),
result = rep(.2, 8),
n = rep(100, 8),
group_var = rep(c('One', 'Two', 'Three', 'Four'), 2)
) %>% factors(grouped = T, group_var = group_var, label_var = label) %>%
reverse_group(rev_group = T)
#### Reverse Group ####
reverse_group <- function(
dataset,
rev_group
){
if(rev_group == T){
dataset <- dataset %>%
dplyr::ungroup() %>%
dplyr::arrange(
group_var = forcats::fct_inorder(group_var)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var)
) %>%
dplyr::arrange(
group_var = forcats::fct_rev(group_var)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var),
group_var = as.character.factor(group_var)
) %>%
dplyr::group_by(group_var)
} else {
dataset <- dataset
}
}
#### Reverse label unordered pt 2 ####
reverse_label_unordered2 <- function(
dataset,
rev_label
){
if(rev_label == T){
dataset <- dataset %>%
dplyr::ungroup() %>%
dplyr::arrange(
group_var = forcats::fct_inorder(group_var)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var)
) %>%
dplyr::arrange(
group_var = forcats::fct_rev(group_var)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var),
group_var = as.character.factor(group_var)
)  %>%
dplyr::group_by(group_var)
} else {
dataset <- dataset
}
}
group_backward <- tibble::tibble(
label = c(rep('One', 4), rep('Two', 4)),
result = rep(.2, 8),
n = rep(100, 8),
group_var = rep(c('One', 'Two', 'Three', 'Four'), 2)
) %>% factors(grouped = T, group_var = group_var, label_var = label) %>%
reverse_group(rev_group = T)
group_levels <- purrr::as_vector(group_backward$group_var)
install.packages(c("flextable", "pandocfilters", "rlang", "sjmisc", "tinytex", "xfun"))
install.packages(c("flextable", "pandocfilters", "rlang"))
install.packages("flextable")
install.packages("pandocfilters")
install.packages("rlang")
install.packages(c("sjmisc", "tinytex", "xfun"))
install.packages(c("cluster", "dbplyr", "ellipsis", "flextable", "gdtools", "ggplot2", "ggpubr", "mvtnorm", "officer", "prediction", "remotes", "rlang", "sjmisc", "tinytex", "xfun"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(devtools)
library(roxygen2)
#Process documentation
setwd('~/Documents/GitHub/orderlabel/')
document()
devtools::install_github('nick-moffitt/orderlabel')
#devtools::install_github('nick-moffitt/orderlabel')
library(orderlabel)
