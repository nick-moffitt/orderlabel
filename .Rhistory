T
)
)
grouped = ifelse(
group_test$test == T,
T,
F
)
#Flags for putting a specific label/group first
specifically_ordered = ifelse(
is.character(label_specific) == T,
T,
F
)
specifically_ordered_group = ifelse(
is.character(group_specific) == T,
T,
F
)
### Stop if group_var not specified but other grouping arguments are
if((inherent_order_group == T | !is.na(group_specific) | rev_group == T) & grouped == F){
stop("You specified a grouping argument but not the group_var. Either add in a variable for group_var or do not run other grouping arguments.")
}
if((stacked != 'NULL') & grouped == F){
warning('You used a "stacked ordering system without specifying group_var. Is your data grouped?')
}
### Prep work
dataset <- reverse_label(dataset, grouped, !!group_var_flag, !!label_var_flag, rev_label)
### (1) ungrouped Section
if(grouped == F){
dataset <- section_ungrouped(dataset, grouped, specifically_ordered, inherent_order_label, stacked, label_specific)
### Arranging WITH grouping variables
} else{
# (2) Grouped Section: arranging for specific group and label to be first
dataset <- section_grouped_specifics(dataset, specifically_ordered, label_specific,inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group)
# (3) Grouped Section: arranging for specific group to be first
dataset <- section_grouped_specifics_nolab(dataset, specifically_ordered, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
# (4) Grouped Section: inherent order of grouping variables
dataset <- section_grouped_ordered(dataset, specifically_ordered, label_specific, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
# (5) Grouped Section: arranging grouping variables if group NOT inherently ordered
dataset <- section_grouped_unordered(dataset, specifically_ordered, label_specific, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
}
### topbox
dataset <- topbox(dataset, topbox)
### Put "None" & "Other" at bottom
dataset <- none_other(dataset, none_other, grouped)
### Horizontal
dataset <- horizontal_chart(dataset, horizontal, grouped)
### Stacked
dataset <- stacked_chart(dataset, stacked, grouped, inherent_order_group, specifically_ordered_group)
dataset <- stacked_chart_ms(dataset, stacked, grouped, inherent_order_group, specifically_ordered_group)
return(dataset)
}
### Not grouped
frequencies <- responses %>%
filter(district == 'District 1') %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
mutate(
variable = NA
) %>%
order_label(
stacked = 'gg',
#rev_label = T
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
group_var = district,
stacked = 'gg',
#inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
topbox = 3
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
group_var = group_var,
stacked = 'gg',
#inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
topbox = 3
)
View(frequencies)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
#group_var = group_var,
stacked = 'gg',
#inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
topbox = 3
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
group_var = group_var,
stacked = 'gg',
#inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
topbox = 3
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
group_var = group_var,
stacked = 'gg',
#inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
#topbox = 3
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
#group_var = group_var,
stacked = 'gg',
#inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
#topbox = 3
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
#group_var = group_var,
stacked = 'gg',
#inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
#topbox = 3
)
### Final Function
order_label <- function(
dataset, #will likely be frequencies
label_var = label,
inherent_order_label = F,
group_var = F,
inherent_order_group = F,
label_specific = NA,
group_specific = NA,
stacked = 'NULL',
horizontal = F,
rev_label = F,
rev_group = F,
none_other = T,
topbox = NULL
) {
options(warn = -1) #check what these warnings actually are...
###Flags
#Enquo flags
label_var_flag <- dplyr::enquo(label_var)
group_var_flag <- dplyr::enquo(group_var)
#Stacked flags: bars always inherently ordered
inherent_order_label = ifelse(
stacked != 'NULL',
T,
inherent_order_label
)
#Grouping flags
group_test <- dataset %>%
dplyr::mutate(
test = ifelse(
!!group_var_flag == F,
F,
T
)
)
grouped = ifelse(
group_test$test == T,
T,
F
)
#Flags for putting a specific label/group first
specifically_ordered = ifelse(
is.character(label_specific) == T,
T,
F
)
specifically_ordered_group = ifelse(
is.character(group_specific) == T,
T,
F
)
### Stop if group_var not specified but other grouping arguments are
if((inherent_order_group == T | !is.na(group_specific) | rev_group == T) & grouped == F){
stop("You specified a grouping argument but not the group_var. Either add in a variable for group_var or do not run other grouping arguments.")
}
if(stacked != 'NULL' & grouped == F){
warning('You used a "stacked" ordering system without specifying group_var. Is your data grouped?')
}
### Prep work
dataset <- reverse_label(dataset, grouped, !!group_var_flag, !!label_var_flag, rev_label)
### (1) ungrouped Section
if(grouped == F){
dataset <- section_ungrouped(dataset, grouped, specifically_ordered, inherent_order_label, stacked, label_specific)
### Arranging WITH grouping variables
} else{
# (2) Grouped Section: arranging for specific group and label to be first
dataset <- section_grouped_specifics(dataset, specifically_ordered, label_specific,inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group)
# (3) Grouped Section: arranging for specific group to be first
dataset <- section_grouped_specifics_nolab(dataset, specifically_ordered, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
# (4) Grouped Section: inherent order of grouping variables
dataset <- section_grouped_ordered(dataset, specifically_ordered, label_specific, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
# (5) Grouped Section: arranging grouping variables if group NOT inherently ordered
dataset <- section_grouped_unordered(dataset, specifically_ordered, label_specific, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
}
### topbox
dataset <- topbox(dataset, topbox)
### Put "None" & "Other" at bottom
dataset <- none_other(dataset, none_other, grouped)
### Horizontal
dataset <- horizontal_chart(dataset, horizontal, grouped)
### Stacked
dataset <- stacked_chart(dataset, stacked, grouped, inherent_order_group, specifically_ordered_group)
dataset <- stacked_chart_ms(dataset, stacked, grouped, inherent_order_group, specifically_ordered_group)
return(dataset)
}
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
#group_var = group_var,
stacked = 'gg',
#inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
#topbox = 3
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
group_var = group_var,
stacked = 'gg',
#inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
#topbox = 3
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
group_var = group_var,
stacked = 'gg',
inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
#topbox = 3
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
group_var = group_var,
stacked = 'gg',
inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
#topbox = 3
)
?order_label
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
group_var = group_var,
stacked = 'gg',
inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
#topbox = 3
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
#group_var = group_var,
stacked = 'gg',
inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
#topbox = 3
)
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
#group_var = group_var,
stacked = 'gg',
#inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
#topbox = 3
)
### Final Function
order_label <- function(
dataset, #will likely be frequencies
label_var = label,
inherent_order_label = F,
group_var = F,
inherent_order_group = F,
label_specific = NA,
group_specific = NA,
stacked = 'NULL',
horizontal = F,
rev_label = F,
rev_group = F,
none_other = T,
topbox = NULL
) {
options(warn = -1) #check what these warnings actually are...
###Flags
#Enquo flags
label_var_flag <- dplyr::enquo(label_var)
group_var_flag <- dplyr::enquo(group_var)
#Stacked flags: bars always inherently ordered
inherent_order_label = ifelse(
stacked != 'NULL',
T,
inherent_order_label
)
#Grouping flags
group_test <- dataset %>%
dplyr::mutate(
test = ifelse(
!!group_var_flag == F,
F,
T
)
)
grouped = ifelse(
group_test$test == T,
T,
F
)
#Flags for putting a specific label/group first
specifically_ordered = ifelse(
is.character(label_specific) == T,
T,
F
)
specifically_ordered_group = ifelse(
is.character(group_specific) == T,
T,
F
)
### Stop if group_var not specified but other grouping arguments are
if((inherent_order_group == T | !is.na(group_specific) | rev_group == T) & grouped == F){
stop("You specified a grouping argument but not the group_var. Either add in a variable for group_var or do not run other grouping arguments.")
}
if(stacked != 'NULL' & grouped == F){
warnErrList('You used a "stacked" ordering system without specifying group_var. Is your data grouped?')
}
### Prep work
dataset <- reverse_label(dataset, grouped, !!group_var_flag, !!label_var_flag, rev_label)
### (1) ungrouped Section
if(grouped == F){
dataset <- section_ungrouped(dataset, grouped, specifically_ordered, inherent_order_label, stacked, label_specific)
### Arranging WITH grouping variables
} else{
# (2) Grouped Section: arranging for specific group and label to be first
dataset <- section_grouped_specifics(dataset, specifically_ordered, label_specific,inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group)
# (3) Grouped Section: arranging for specific group to be first
dataset <- section_grouped_specifics_nolab(dataset, specifically_ordered, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
# (4) Grouped Section: inherent order of grouping variables
dataset <- section_grouped_ordered(dataset, specifically_ordered, label_specific, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
# (5) Grouped Section: arranging grouping variables if group NOT inherently ordered
dataset <- section_grouped_unordered(dataset, specifically_ordered, label_specific, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
}
### topbox
dataset <- topbox(dataset, topbox)
### Put "None" & "Other" at bottom
dataset <- none_other(dataset, none_other, grouped)
### Horizontal
dataset <- horizontal_chart(dataset, horizontal, grouped)
### Stacked
dataset <- stacked_chart(dataset, stacked, grouped, inherent_order_group, specifically_ordered_group)
dataset <- stacked_chart_ms(dataset, stacked, grouped, inherent_order_group, specifically_ordered_group)
return(dataset)
}
### Grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
order_label(
#group_var = group_var,
stacked = 'gg',
#inherent_order_group = T,
#rev_group = T,
#rev_label = T,
#group_specific = 'District 3',
#topbox = 3
)
