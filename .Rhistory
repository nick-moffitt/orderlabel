hjust = nudge,
size = percent_size
) +
scale_fill_manual(
values = colors
) +
scale_color_manual(
guide = FALSE,
values = colors
) +
scale_y_percent(
limits = c(0, max(frequencies$result) + ifelse(max(frequencies$result) > .5, .12, .07))
) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = spaces, simplify = FALSE), paste, collapse="\n")) +
theme_minimal() +
theme( legend.text = element_text(size = 12),
axis.text = element_text(size = axis_text_size),
panel.grid = element_blank(),
axis.title = element_blank(),
legend.title = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 12),
legend.position = "top"
) +
guides(fill = guide_legend(reverse = T)) +
coord_flip()
}
names <- names(responses) %>% as_tibble()
#### Function documentation ####
ls('package:orderlabel') #look at all functions in package
?order_label
?other_rm
?topline
?read_excel_allsheets
#### Test if no label ####
#ungrouped
frequencies <- ungrouped_freqs %>%
select(
variable,
result
) %>%
order_label(
label_var = variable
)
chart <- bar1()
chart
#grouped
frequencies <- grouped_freqs %>%
select(
district,
variable,
result
) %>%
order_label(
group_var = district,
label_var = variable
)
chart <- groupedbar()
chart
#### Testing function ungrouped ####
rm(frequencies)
frequencies <- ungrouped_freqs %>%
order_label(
#horizontal = T,
#inherent_order_label = T,
#rev_label = T,
#label_specific = 'Two',
# label_var = stat
)
chart <- bar1()
#chart <- bar1_hor()
chart
ggchart_save('test')
#### Testing with grouped variables ####
rm(frequencies)
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
#inherent_order_label = T,
#inherent_order_group = T,
#rev_label = T,
#rev_group = T,
#label_specific = 'Two',
#group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
ggchart_save('test')
#### Testing Stacked bars ####
rm(frequencies)
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
inherent_order_label = T,
#inherent_order_group = T,
#rev_label = T,
#rev_group = T,
#label_specific = 'Two',
#group_specific = 'District 2'
)
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
inherent_order_label = T,
inherent_order_group = T,
#rev_label = T,
#rev_group = T,
#label_specific = 'Two',
#group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
inherent_order_label = T,
inherent_order_group = T,
rev_label = T,
#rev_group = T,
#label_specific = 'Two',
#group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
inherent_order_label = T,
inherent_order_group = T,
rev_label = T,
rev_group = T,
#label_specific = 'Two',
#group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
inherent_order_label = T,
inherent_order_group = T,
rev_label = T,
rev_group = T,
label_specific = 'Two',
#group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
inherent_order_label = T,
inherent_order_group = T,
rev_label = T,
rev_group = T,
label_specific = 'Two',
group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
#### Testing Stacked bars ####
rm(frequencies)
#Not grouped
frequencies <- responses %>%
filter(district == 'District 1') %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
mutate(
variable = NA
) %>%
order_label(
#inherent_order_label = T
stacked = T,
#rev_label = T
)
chart <- bar1()
chart
chart <- stacked_bar(
x_var = frequencies$variable
)
chart
ggchart_save('test')
#grouped
frequencies <- responses %>%
filter(!is.na(district)) %>%
group_by(district) %>%
freqs(
QCURRENT1,
nas = F,
wt = weights
) %>%
mutate(
variable = NA
) %>%
order_label(
group_var = district,
stacked = T,
#inherent_order_group = T,
#rev_group = T,
#rev_label = T
group_specific = 'District 3'
)
chart <- stacked_bar()
chart
ggchart_save('test')
#### testing topline ####
#Test pieces
zero <- tibble(
variable = 'QFREQPARK_1',
label = 'On',
n = 0,
result = 0
)
frequencies <- responses %>% freqs(
QAGEGROUP,
QFREQPARK_AREA1_1,
QFREQPARK_AREA1_2,
QFREQPARK_AREA1_3,
QFREQPARK_AREA1_4,
QFREQPARK_AREA2_1,
QFREQPARK_AREA2_2,
QFREQPARK_AREA2_3,
QFREQPARK_AREA2_4
) %>%
filter(
label != '',
label != 'Off'
) %>%
bind_rows(zero) %>%
var_sep() %>%
add_percent() %>%
add_lessthan() %>%
whole_numbers('AREA1|PARK_1')
#Test as whole
zero <- tibble(
variable = 'QFREQPARK_1',
label = 'On',
n = 0,
result = 0
)
frequencies <- responses %>% freqs(
QAGEGROUP,
QFREQPARK_AREA1_1,
QFREQPARK_AREA1_2,
QFREQPARK_AREA1_3,
QFREQPARK_AREA1_4,
QFREQPARK_AREA2_1,
QFREQPARK_AREA2_2,
QFREQPARK_AREA2_3,
QFREQPARK_AREA2_4
) %>%
filter(
label != '',
label != 'Off'
) %>%
bind_rows(zero) %>%
topline('PARK_1|AGE')
#### Test pieces of order_label ####
#blank_values
grouped_freqs %>% blank_values()
frequencies <- responses %>% freqs(
QAGEGROUP,
QFREQPARK_AREA1_1,
QFREQPARK_AREA1_2,
QFREQPARK_AREA1_3,
QFREQPARK_AREA1_4,
QFREQPARK_AREA2_1,
QFREQPARK_AREA2_2,
QFREQPARK_AREA2_3,
QFREQPARK_AREA2_4
) %>%
filter(
label != '',
label != 'Off'
) %>%
bind_rows(zero) %>%
topline('PARK_1|AGE')
#### None Other Test ####
### Ungrouped
frequencies <- ungrouped_freqs %>%
mutate(
label = case_when(
label == 'One' ~ 'Other',
label == 'Two' ~ 'None of the above',
T ~ label
)
) %>%
order_label(
#horizontal = T,
#inherent_order_label = T,
#rev_label = T,
#label_specific = 'Three',
)
chart <- bar1()
#chart <- bar1_hor()
chart
ggchart_save('test')
### Grouped
frequencies <- grouped_freqs %>%
mutate(
group_var = district,
label = case_when(
label == 'One' ~ 'Other',
label == 'Two' ~ 'None of the above',
T ~ label
)
) %>%
order_label(
group_var = district,
#horizontal = T,
#inherent_order_label = T,
#inherent_order_group = T,
#rev_label = T,
#rev_group = T,
#label_specific = 'Three',
#group_specific = 'District 2' # Add 4 iterations, both specifics
)
chart <- groupedbar_hor()
chart <- groupedbar()
chart
### Grouped
frequencies <- grouped_freqs %>%
mutate(
group_var = district,
label = case_when(
label == 'One' ~ 'Other',
label == 'Two' ~ 'None of the above',
T ~ label
)
) %>%
order_label(
group_var = district,
horizontal = T,
#inherent_order_label = T,
#inherent_order_group = T,
#rev_label = T,
#rev_group = T,
#label_specific = 'Three',
#group_specific = 'District 2' # Add 4 iterations, both specifics
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
ggchart_save('test')
#### ***** EXECUTIVE FUNCTIONS ***** ####
#### Final order_label Function ####
order_label <- function(
dataset, #will likely be frequencies
label_var = label,
inherent_order_label = F,
group_var = F,
inherent_order_group = F,
label_specific = NA,
group_specific = NA,
stacked = F,
ms_stacked = F,
horizontal = F,
rev_label = F,
rev_group = F,
none_other = T
) {
options(warn = -1)
###Flags
#Enquo flags
label_var_flag <- dplyr::enquo(label_var)
group_var_flag <- dplyr::enquo(group_var)
#Stacked flags: bars always inherently ordered
inherent_order_label = ifelse(
stacked == T | ms_stacked == T,
T,
inherent_order_label
)
#Grouping flags
group_test <- dataset %>%
dplyr::mutate(
test = ifelse(
!!group_var_flag == F,
F,
T
)
)
grouped = ifelse(
group_test$test == T,
T,
F
)
#Flags for putting a specific label/group first
specifically_ordered = ifelse(
is.character(label_specific) == T,
T,
F
)
specifically_ordered_group = ifelse(
is.character(group_specific) == T,
T,
F
)
### Prep work
dataset <- reverse_label(dataset, grouped, !!group_var_flag, !!label_var_flag, rev_label)
### (1) ungrouped Section
if(grouped == F){
dataset <- section_ungrouped(dataset, grouped, specifically_ordered, inherent_order_label, stacked, label_specific)
### Arranging WITH grouping variables
} else{
### (2) Grouped Section: arranging for specific group and label to be first
dataset <- section_grouped_specifics(dataset, specifically_ordered, label_specific,inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group)
### (3) Grouped Section: arranging for specific group to be first
dataset <- section_grouped_specifics_nolab(dataset, specifically_ordered, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
### (4) Grouped Section: inherent order of grouping variables
dataset <- section_grouped_ordered(dataset, specifically_ordered, label_specific, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
### (5) Grouped Section: arranging grouping variables if group NOT inherently ordered
dataset <- section_grouped_unordered(dataset, specifically_ordered, label_specific, inherent_order_label, group_var, inherent_order_group, group_specific, specifically_ordered_group, rev_group, rev_label)
}
### Put "None" & "Other" at bottom
dataset <- none_other(dataset, none_other, grouped)
### Horizontal
dataset <- horizontal_chart(dataset, horizontal, grouped)
### Stacked
dataset <- stacked_chart(dataset, stacked, grouped, inherent_order_group, specifically_ordered_group)
dataset <- stacked_chart_ms(dataset, ms_stacked, grouped, inherent_order_group, specifically_ordered_group)
}
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
#inherent_order_label = T,
#inherent_order_group = T,
#rev_label = T,
#rev_group = T,
#label_specific = 'Two',
#group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
inherent_order_label = T,
#inherent_order_group = T,
#rev_label = T,
#rev_group = T,
#label_specific = 'Two',
#group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
inherent_order_label = T,
inherent_order_group = T,
#rev_label = T,
#rev_group = T,
#label_specific = 'Two',
#group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
inherent_order_label = T,
inherent_order_group = T,
#rev_label = T,
rev_group = T,
#label_specific = 'Two',
#group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
frequencies <- grouped_freqs %>%
order_label(
group_var = district,
horizontal = T,
inherent_order_label = T,
inherent_order_group = T,
rev_label = T,
rev_group = T,
#label_specific = 'Two',
#group_specific = 'District 2'
)
chart <- groupedbar_hor()
#chart <- groupedbar()
chart
library(devtools)
library(roxygen2)
#Process documentation
setwd('~/Dropbox (Y2 Analytics)/Y2 Analytics Team Folder/Resources/Packages/orderlabel/')
document()
