)
)[1]
grouped <- ifelse(
group_test$test == TRUE,
TRUE,
FALSE
)
}
frequencies <- mtcars %>%
freqs(gear) %>%
order_label()
### Final Function
order_label <- function(
dataset, #will likely be frequencies
label_var = label,
group_var = FALSE,
inherent_order_label = FALSE,
inherent_order_group = FALSE,
label_first = NA,
group_first = NA,
rev_label = FALSE,
rev_group = FALSE,
label_last = NA,
group_last = NA,
horizontal = FALSE,
stacked = c('NULL', 'ms', 'gg'),
topbox = NULL,
none_other = TRUE,
num_fmt = c("percent", "general")
) {
options(warn = -1) #check what these warnings actually are...
### Test matching arguments
num_fmt <- rlang::arg_match(num_fmt)
stacked <- rlang::arg_match(stacked)
### Flags
#Enquo flags
label_var_flag <- dplyr::enquo(label_var)
group_var_flag <- dplyr::enquo(group_var)
#Stacked flags: bars always inherently ordered
inherent_order_label <- ifelse(
stacked != 'NULL',
TRUE,
inherent_order_label
)
#Grouping flags
group_test <- dataset %>%
dplyr::mutate(
test = ifelse(
!!group_var_flag == FALSE,
FALSE,
TRUE
)
)
grouped <- ifelse(
group_test$test == TRUE,
TRUE,
FALSE
)
}
frequencies <- mtcars %>%
freqs(gear) %>%
order_label()
### Final Function
order_label <- function(
dataset, #will likely be frequencies
label_var = label,
group_var = FALSE,
inherent_order_label = FALSE,
inherent_order_group = FALSE,
label_first = NA,
group_first = NA,
rev_label = FALSE,
rev_group = FALSE,
label_last = NA,
group_last = NA,
horizontal = FALSE,
stacked = c('NULL', 'ms', 'gg'),
topbox = NULL,
none_other = TRUE,
num_fmt = c("percent", "general")
) {
options(warn = -1) #check what these warnings actually are...
### Test matching arguments
num_fmt <- rlang::arg_match(num_fmt)
stacked <- rlang::arg_match(stacked)
### Flags
#Enquo flags
label_var_flag <- dplyr::enquo(label_var)
group_var_flag <- dplyr::enquo(group_var)
#Stacked flags: bars always inherently ordered
inherent_order_label <- ifelse(
stacked != 'NULL',
TRUE,
inherent_order_label
)
#Grouping flags
group_test <- dataset %>%
dplyr::mutate(
test = ifelse(
!!group_var_flag == FALSE,
FALSE,
TRUE
)
)
grouped <- ifelse(
group_test$test == TRUE,
TRUE,
FALSE
)[1]
}
frequencies <- mtcars %>%
freqs(gear) %>%
order_label()
?pivot_longer
?gather
test <- spreading_top2(stacked_df, 1)
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
top2_plus1 <- top2box + 1 # Need to add 1 because 1st column is group_var, not top box
test1 <- dataset %>%
dplyr::select(
-.data$result
)
test2 <- dataset %>%
dplyr::mutate(value1 = .data$value) %>%
dplyr::select(
.data$group_var,
.data$value1,
.data$result
) %>%
tidyr::spread(
key = .data$value1,
value = .data$result
) %>%
dplyr::mutate(
topbox = dplyr::select(., 2:tidyselect::all_of(top2_plus1)) %>%
rowSums(na.rm = TRUE)
) %>%
tidyr::gather(
key = "value",
value = "result",
-.data$group_var,
-.data$topbox
)
dataset <- dplyr::left_join(
test1,
test2
)
}
test <- spreading_top2(stacked_df, 1)
#### order_label setup ####
library(testthat)
library(tibble)
library(dplyr)
library(forcats)
library(y2clerk)
library(orderlabel)
stacked_df <- tibble(
group_var = c('Brand 1', 'Brand 1', 'Brand 1', 'Brand 2', 'Brand 2', 'Brand 2'),
value = rep(c('1', '2', '3'), 2),
label = rep(c('top1', 'top2', 'top3'), 2),
result = c(.1, .2, .7, .2, .05, .65)
)
stacked_df_top <- tibble(
group_var = c('Brand 1', 'Brand 1', 'Brand 1', 'Brand 2', 'Brand 2', 'Brand 2'),
value = rep(c('1', '2', '3'), 2),
label = rep(c('top1', 'top2', 'top3'), 2),
result = c(.1, .2, .7, .2, .05, .65),
topbox = c(rep(.3, 3), rep(.25, 3))
)
ungrouped_df <- tibble(
variable = rep('X', 5),
value = c('1', '2', '3', '4', '5'),
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = c(.1, .2, .3, .4, .5),
n = rep(100, 5)
)
groups <- tibble(
group_var = c(rep('Brand 1', 5), rep('Brand 2', 5))
)
grouped_df <- bind_rows(ungrouped_df, ungrouped_df) %>%
bind_cols(groups)
noneother_df <- tibble(
variable = rep('X', 8),
value = c('1', '2', '3', '4', '5', '6', '7', '8'),
label = c(
'One',
'Two',
'Other',
'None of the above',
'Prefer not to say',
'Three',
'Four',
'Five'
),
result = c(.1, .2, .3, .4, .5, .6, .7, .8),
n = rep(100, 8)
)
groups <- tibble(
group_var = c(rep('Brand 1', 8), rep('Brand 2', 8))
)
other_grouped_df <- bind_rows(noneother_df, noneother_df) %>%
bind_cols(groups)
noneother_grouped2 <- tibble(
group_var = c(
'Brand 1', 'Brand 1',
'Brand 2', 'Brand 2',
'Other', 'Other',
'None of the above', 'None of the above',
'Prefer not to say', 'Prefer not to say',
'Brand 3', 'Brand 3'
),
variable = rep('X', 12),
value = rep(c('1', '2'), 6),
label = rep(c('One', 'Two'), 6),
result = rep(c(.1, .2), 6),
n = rep(100, 12)
)
#### Private Functions *************************************** ####
context("order_label")
test <- spreading_top2(stacked_df, 1)
View(stacked_df)
View(test)
created_vector <- test %>% pull(topbox)
expected_vector <- c(rep(.1, 3), rep(.2, 3))
expect_equal(created_vector, expected_vector)
test <- spreading_top2(stacked_df, 2)
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
top2_plus1 <- top2box + 1 # Need to add 1 because 1st column is group_var, not top box
test1 <- dataset %>%
dplyr::select(
-.data$result
)
test2 <- dataset %>%
dplyr::mutate(value1 = .data$value) %>%
dplyr::select(
.data$group_var,
.data$value1,
.data$result
) %>%
tidyr::spread(
key = .data$value1,
value = .data$result
#   ) %>%
#   dplyr::mutate(
#     topbox = dplyr::select(., 2:tidyselect::all_of(top2_plus1)) %>%
#       rowSums(na.rm = TRUE)
#     ) %>%
#   tidyr::gather(
#     key = "value",
#     value = "result",
#     -.data$group_var,
#     -.data$topbox
#   )
# dataset <- dplyr::left_join(
#   test1,
#   test2
)
}
test <- spreading_top2(stacked_df, 2)
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
top2_plus1 <- top2box + 1 # Need to add 1 because 1st column is group_var, not top box
test1 <- dataset %>%
dplyr::select(
-.data$result
)
test2 <- dataset %>%
dplyr::mutate(value1 = .data$value) %>%
dplyr::select(
.data$group_var,
.data$value1,
.data$result
) %>%
tidyr::spread(
key = .data$value1,
value = .data$result
) %>%
dplyr::mutate(
topbox = dplyr::select(., 2:tidyselect::all_of(top2_plus1)) %>%
rowSums(na.rm = TRUE)
#     ) %>%
#   tidyr::gather(
#     key = "value",
#     value = "result",
#     -.data$group_var,
#     -.data$topbox
#   )
# dataset <- dplyr::left_join(
#   test1,
#   test2
)
}
test <- spreading_top2(stacked_df, 2)
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
top2_plus1 <- top2box + 1 # Need to add 1 because 1st column is group_var, not top box
test1 <- dataset %>%
dplyr::select(
-.data$result
)
test2 <- dataset %>%
dplyr::mutate(value1 = .data$value) %>%
dplyr::select(
.data$group_var,
.data$value1,
.data$result
) %>%
tidyr::spread(
key = .data$value1,
value = .data$result
) %>%
dplyr::mutate(
topbox = dplyr::select(2:tidyselect::all_of(top2_plus1)) %>%
rowSums(na.rm = TRUE)
#     ) %>%
#   tidyr::gather(
#     key = "value",
#     value = "result",
#     -.data$group_var,
#     -.data$topbox
#   )
# dataset <- dplyr::left_join(
#   test1,
#   test2
)
}
test <- spreading_top2(stacked_df, 2)
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
top2_plus1 <- top2box + 1 # Need to add 1 because 1st column is group_var, not top box
test1 <- dataset %>%
dplyr::select(
-.data$result
)
test2 <- dataset %>%
dplyr::mutate(value1 = .data$value) %>%
dplyr::select(
.data$group_var,
.data$value1,
.data$result
) %>%
tidyr::spread(
key = .data$value1,
value = .data$result
) %>%
dplyr::mutate(
topbox = dplyr::select(.data$., 2:tidyselect::all_of(top2_plus1)) %>%
rowSums(na.rm = TRUE)
#     ) %>%
#   tidyr::gather(
#     key = "value",
#     value = "result",
#     -.data$group_var,
#     -.data$topbox
#   )
# dataset <- dplyr::left_join(
#   test1,
#   test2
)
}
test <- spreading_top2(stacked_df, 2)
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
top2_plus1 <- top2box + 1 # Need to add 1 because 1st column is group_var, not top box
}
test <- spreading_top2(stacked_df, 2)
test
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
top2_plus1 <- top2box + 1 %>% as.numeric()
# Need to add 1 because 1st column is group_var, not top box
test1 <- dataset %>%
dplyr::select(
-.data$result
)
test2 <- dataset %>%
dplyr::mutate(value1 = .data$value) %>%
dplyr::select(
.data$group_var,
.data$value1,
.data$result
) %>%
tidyr::spread(
key = .data$value1,
value = .data$result
) %>%
dplyr::mutate(
topbox = dplyr::select(., 2:tidyselect::all_of(top2_plus1)) %>%
rowSums(na.rm = TRUE)
#     ) %>%
#   tidyr::gather(
#     key = "value",
#     value = "result",
#     -.data$group_var,
#     -.data$topbox
#   )
# dataset <- dplyr::left_join(
#   test1,
#   test2
)
}
test <- spreading_top2(stacked_df, 2)
View(test)
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
top2_plus1 <- top2box + 1 %>% as.numeric()
# Need to add 1 because 1st column is group_var, not top box
test1 <- dataset %>%
dplyr::select(
-.data$result
)
test2 <- dataset %>%
dplyr::mutate(value1 = .data$value) %>%
dplyr::select(
.data$group_var,
.data$value1,
.data$result
) %>%
tidyr::spread(
key = .data$value1,
value = .data$result
) %>%
dplyr::mutate(
topbox = dplyr::select(2:tidyselect::all_of(top2_plus1)) %>%
rowSums(na.rm = TRUE)
#     ) %>%
#   tidyr::gather(
#     key = "value",
#     value = "result",
#     -.data$group_var,
#     -.data$topbox
#   )
# dataset <- dplyr::left_join(
#   test1,
#   test2
)
}
test <- spreading_top2(stacked_df, 2)
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
top2_plus1 <- top2box + 1 # Need to add 1 because 1st column is group_var, not top box
test1 <- dataset %>%
dplyr::select(
-.data$result
)
test2 <- dataset %>%
dplyr::mutate(value1 = .data$value) %>%
dplyr::select(
.data$group_var,
.data$value1,
.data$result
) %>%
tidyr::spread(
key = .data$value1,
value = .data$result
) %>%
dplyr::mutate(
topbox = dplyr::select(., 2:tidyselect::all_of(top2_plus1)) %>%
rowSums(na.rm = TRUE)
#     ) %>%
#   tidyr::gather(
#     key = "value",
#     value = "result",
#     -.data$group_var,
#     -.data$topbox
#   )
# dataset <- dplyr::left_join(
#   test1,
#   test2
)
}
test <- spreading_top2(stacked_df, 2)
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
. <- NULL
top2_plus1 <- top2box + 1 # Need to add 1 because 1st column is group_var, not top box
test1 <- dataset %>%
dplyr::select(
-.data$result
)
test2 <- dataset %>%
dplyr::mutate(value1 = .data$value) %>%
dplyr::select(
.data$group_var,
.data$value1,
.data$result
) %>%
tidyr::spread(
key = .data$value1,
value = .data$result
) %>%
dplyr::mutate(
topbox = dplyr::select(., 2:tidyselect::all_of(top2_plus1)) %>%
rowSums(na.rm = TRUE)
) %>%
tidyr::gather(
key = "value",
value = "result",
-.data$group_var,
-.data$topbox
)
dataset <- dplyr::left_join(
test1,
test2
)
}
test <- spreading_top2(stacked_df, 2)
created_vector <- test %>% pull(topbox)
library(devtools)
create('~/Documents/GitHub/y2butler')
