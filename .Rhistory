top2box <- topbox
dataset <- spreading_top2(dataset, top2box)
dataset <- ordering_top2(dataset)
} else{ # is.null(topbox)
dataset <- dataset
}
}
### spreading_top2
spreading_top2 <- function(dataset, top2box) {
top2_plus1 <- top2box + 1 # Need to add 1 because 1st column is group_var, not top box
test1 <- dataset %>%
dplyr::select(
-.data$result
)
test2 <- dataset %>%
dplyr::mutate(value1 = .data$value) %>%
dplyr::select(
.data$group_var,
.data$value1,
.data$result
) %>%
tidyr::spread(
key = .data$value1,
value = .data$result
) %>%
dplyr::mutate(
topbox = dplyr::select(., 2:tidyselect::all_of(top2_plus1)) %>%
rowSums(na.rm = TRUE)
) %>%
tidyr::gather(
key = value,
value = result,
-.data$group_var,
-.data$topbox
)
dataset <- dplyr::left_join(
test1,
test2
)
}
### ordering_top2
ordering_top2 <- function(dataset) {
dataset <- dataset %>%
dplyr::arrange(
dplyr::desc(.data$topbox)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(.data$group_var)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(.data$label)
) %>%
dplyr::mutate(
percent_label = ifelse(
.data$label == .data$label[1] & .data$group_var == .data$group_var[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
)
)
}
#### Horizontal ####
horizontal_chart <- function(
dataset,
horizontal,
grouped
) {
if(horizontal == TRUE) {
if(grouped == FALSE) {
dataset <- dataset %>%
dplyr::mutate(
label = forcats::fct_rev(.data$label)
)
} else{ #grouped == TRUE
dataset <- dataset %>%
dplyr::mutate(
label = forcats::fct_rev(.data$label)
) %>%
dplyr::mutate(
group_var = forcats::fct_rev(.data$group_var)
)
}
} else{ #horizontal == FALSE
dataset <- dataset
}
}
#### GG Stacked ####
stacked_chart <- function(
dataset,
stacked,
grouped,
inherent_order_group,
specifically_ordered
) {
if(stacked == 'gg' &
grouped == FALSE) {
dataset <- dataset  %>%
dplyr::mutate(
label = forcats::fct_rev(.data$label)
)
} else if(stacked == 'gg' &
grouped == TRUE) {
dataset <- dataset %>%
dplyr::mutate(
label = forcats::fct_rev(.data$label)
) %>%
dplyr::mutate(
group_var = forcats::fct_rev(.data$group_var)
)
} else{
dataset <- dataset
}
}
#### MS Stacked ####
stacked_chart_ms <- function(
dataset,
stacked,
grouped,
inherent_order_group,
specifically_ordered_group
) {
if(stacked == 'ms' &
grouped == TRUE) {
dataset <- dataset %>%
dplyr::mutate(
group_var = forcats::fct_rev(.data$group_var)
)
} else{
dataset <- dataset
}
}
#### none_other ####
none_other <- function(
dataset,
none_other,
grouped
) {
if(none_other == TRUE) {
dataset <- dataset %>%
dplyr::arrange(
label = forcats::fct_relevel(
.data$label,
"Other",
'None of the above',
"Prefer not to say",
after = Inf
)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(.data$label),
percent_label = ifelse(
.data$label == .data$label[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
)
)
} else{
dataset <- dataset
}
#For grouped
if(grouped == TRUE & none_other == TRUE) {
options(warn=-1) # Warnings here are about levels not existing, but probs won't in most cases
dataset <- dataset %>%
dplyr::arrange(
group_var = forcats::fct_relevel(
.data$group_var,
"Other",
'None of the above',
"Prefer not to say",
after = Inf
)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(.data$group_var),
percent_label = ifelse(
.data$label == .data$label[1] & .data$group_var == .data$group_var[1],
stringr::str_c(.data$result * 100, '%'),
stringr::str_c(.data$result * 100)
)
)
} else{
dataset <- dataset
}
}
#### label_last ####
label_last_fun <- function(
dataset,
label_last,
horizontal,
stacked
) {
label_last_dummy = ifelse(
is.character(label_last) == TRUE,
TRUE,
FALSE
)
# Put label_last last
if(label_last_dummy == TRUE & horizontal == FALSE) {
dataset <- dataset %>%
dplyr::arrange(
label = forcats::fct_relevel(
.data$label,
label_last,
after = Inf
)
) %>%
dplyr::mutate(label = forcats::fct_inorder(.data$label))
# Put label_last "first" to be last for horizontal
} else if(label_last_dummy == TRUE & horizontal == TRUE) {
data_rest <- dataset %>% filter(label != label_last)
data_label <- dataset %>% filter(label == label_last)
data_rest <- data_rest %>%
dplyr::arrange(
label = forcats::fct_relevel(
.data$label
)
) %>%
dplyr::arrange(label = forcats::fct_rev(.data$label))
dataset <- bind_rows(data_label, data_rest) %>%
dplyr::mutate(label = forcats::fct_inorder(.data$label))
# Horizontal and NOT stacked, one more reverse...
if(stacked == 'NULL') {
dataset <- dataset %>%
dplyr::arrange(label = forcats::fct_rev(.data$label)) %>%
dplyr::mutate(label = forcats::fct_inorder(.data$label))
return(dataset)
}
} else{
dataset <- dataset
}
}
#### group_last ####
group_last_fun <- function(
dataset,
group_last,
horizontal,
stacked
) {
group_last_dummy = ifelse(
is.character(group_last) == TRUE,
TRUE,
FALSE
)
# put group_last last
if(group_last_dummy == TRUE & horizontal == FALSE) {
dataset <- dataset %>%
dplyr::arrange(
group_var = forcats::fct_relevel(
.data$group_var,
group_last,
after = Inf
)
) %>%
dplyr::mutate(group_var = forcats::fct_inorder(.data$group_var))
# Put group_last "first" to be last for horizontal
} else if(group_last_dummy == TRUE & horizontal == TRUE) {
data_rest <- dataset %>% filter(group_var != group_last)
data_label <- dataset %>% filter(group_var == group_last)
data_rest <- data_rest %>%
dplyr::arrange(
group_var = forcats::fct_relevel(
.data$group_var
)
) %>%
dplyr::arrange(group_var = forcats::fct_rev(.data$group_var))
dataset <- bind_rows(data_label, data_rest) %>%
dplyr::mutate(group_var = forcats::fct_inorder(.data$group_var))
# Horizontal and NOT stacked, one more reverse...
if(stacked == 'NULL') {
dataset <- dataset %>%
dplyr::arrange(group_var = forcats::fct_rev(.data$group_var)) %>%
dplyr::mutate(group_var = forcats::fct_inorder(.data$group_var))
return(dataset)
}
} else{
dataset <- dataset
}
}
#### num_fmt ####
num_fmt_orderlabel <- function(
dataset,
num_fmt
) {
if(num_fmt == "percent") {
dataset <- dataset
} else{
dataset <- dataset %>%
dplyr::mutate(percent_label = as.character(.data$result))
}
}
df <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(grouped = F, group_var = NULL, label_var = label, rev_label = F)
values <- purrr::as_vector(df$value)
df_rev <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(grouped = F, group_var = NULL, label_var = label, rev_label = T)
df <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = FALSE
)
values <- purrr::as_vector(df$value)
df <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = FALSE
)
values <- purrr::as_vector(df$value)
df
values
df_rev <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = TRUE
)
values_rev <- purrr::as_vector(df_rev$value)
df
values_rev
df <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = FALSE
)
values <- purrr::as_vector(df$value)
df_rev <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = TRUE
)
values_rev <- purrr::as_vector(df_rev$value)
df
df_rev
?mapvalues
#### Reverse label inherent order ####
reverse_label <- function(
dataset,
grouped,
group_var,
label_var,
rev_label = FALSE
) {
label_var_flag <- dplyr::enquo(label_var)
group_var_flag <- dplyr::enquo(group_var)
dataset <- factors(dataset, grouped, !!group_var_flag, !!label_var_flag)
if(rev_label == TRUE){
max_val <- max(dataset$value)
min_val <- min(dataset$value)
dataset <- dataset %>%
dplyr::mutate(
# value = plyr::mapvalues(
#   .data$value,
#   from = c(min_val:max_val),
#   to = c(max_val:min_val)
# )
value = rev(value)
)
} else {
dataset <- dataset
}
}
df <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = FALSE
)
values <- purrr::as_vector(df$value)
df_rev <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = TRUE
)
df_rev
values_rev <- purrr::as_vector(df_rev$value)
### reverse_label (inherent order)
test_that("reverse_label: inherent order", {
df <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = FALSE
)
values <- purrr::as_vector(df$value)
df_rev <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = TRUE
)
values_rev <- purrr::as_vector(df_rev$value)
expect_equal(values, c(1:5))
expect_equal(values_rev, c(5:1))
})
expect_equal(values, c(1:5))
expect_equal(values_rev, c(5:1))
#### Reverse label inherent order ####
reverse_label <- function(
dataset,
grouped,
group_var,
label_var,
rev_label = FALSE
) {
label_var_flag <- dplyr::enquo(label_var)
group_var_flag <- dplyr::enquo(group_var)
dataset <- factors(dataset, grouped, !!group_var_flag, !!label_var_flag)
if(rev_label == TRUE){
max_val <- max(dataset$value)
min_val <- min(dataset$value)
dataset <- dataset %>%
dplyr::mutate(
# value = plyr::mapvalues(
#   .data$value,
#   from = c(min_val:max_val),
#   to = c(max_val:min_val)
# )
value = rev(.data$value)
)
} else {
dataset <- dataset
}
}
### reverse_label (inherent order)
test_that("reverse_label: inherent order", {
df <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = FALSE
)
values <- purrr::as_vector(df$value)
df_rev <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = TRUE
)
values_rev <- purrr::as_vector(df_rev$value)
expect_equal(values, c(1:5))
expect_equal(values_rev, c(5:1))
})
df_rev <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
)
df_rev
df_rev <- data.frame(
label = c('One', 'Two', 'Three', 'Four', 'Five'),
result = rep(.2, 5),
n = rep(100, 5)
) %>% reverse_label(
grouped = FALSE,
group_var = NULL,
label_var = label,
rev_label = TRUE
)
df_rev
