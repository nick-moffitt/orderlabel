'Brand 3',
'Brand 4'
),
result = rep(c(1:4),3)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(label)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var)
)
ordered_df <- df
lab_lev1 <- levels(df$label)
group_lev1 <- levels(df$group_var)
df_unordered <- data.frame(
group_var = c(
rep('Two', 4),
rep('One', 4),
rep('Three', 4)
),
label = c(
'Brand 2',
'Brand 1',
'Brand 4',
'Brand 3'
),
result = rep(c(5:2),3)
) %>% order_same(orders = ordered_df)
lab_lev2 <- levels(df$label)
group_lev2 <- levels(df$group_var)
df <- data.frame(
group_var = c(
rep('One', 4),
rep('Two', 4),
rep('Three', 4)
),
label = c(
'Brand 1',
'Brand 2',
'Brand 3',
'Brand 4'
),
result = rep(c(1:4),3)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(label)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var)
)
ordered_df <- df
lab_lev1 <- levels(df$label)
group_lev1 <- levels(df$group_var)
df_unordered <- data.frame(
group_var = c(
rep('Two', 4),
rep('One', 4),
rep('Three', 4)
),
label = c(
'Brand 2',
'Brand 1',
'Brand 4',
'Brand 3'
),
result = rep(c(5:2),3)
) %>% order_same(orders = ordered_df)
lab_lev2 <- levels(df$label)
group_lev2 <- levels(df$group_var)
expect_equal(lab_lev1, lab_lev2)
??expect_equal
testthat::expect_equal(lab_lev1, lab_lev2)
testthat::expect_equal(group_lev1, group_lev2)
responses %>% ungroup
df <- data.frame(
group_var = c(
rep('One', 4),
rep('Two', 4),
rep('Three', 4)
),
label = c(
'Brand 1',
'Brand 2',
'Brand 3',
'Brand 4'
),
result = rep(c(1:4),3)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(label)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var)
)
ordered_df <- df
lab_lev1 <- levels(df$label)
group_lev1 <- levels(df$group_var)
df_unordered <- data.frame(
group_var = c(
rep('Two', 4),
rep('One', 4),
rep('Three', 4)
),
label = c(
'Brand 2',
'Brand 1',
'Brand 4',
'Brand 3'
),
result = rep(c(5:2),3)
) %>% order_same(
orders = ordered_df,
group_var = 'NULL'
)
order_same <- function(
dataset,
orders = ordered_df,
group_var = 'NULL'
) {
label_flag <- purrr::as_vector(orders$label) %>% levels()
#run ordering functions
if(any(names(orders) == 'group_var') == T |
group_var != 'NULL'
) {
dataset <- create_group_var(dataset, group_var)
group_flag <- purrr::as_vector(orders$group_var) %>% levels()
dataset <- grouped_vector(dataset, label_flag1 = label_flag, group_flag1 = group_flag)
} else{ #NOT grouped
dataset <- ungrouped_vector(dataset, label_flag1 = label_flag)
}
return(dataset)
}
df_unordered <- data.frame(
group_var = c(
rep('Two', 4),
rep('One', 4),
rep('Three', 4)
),
label = c(
'Brand 2',
'Brand 1',
'Brand 4',
'Brand 3'
),
result = rep(c(5:2),3)
) %>% order_same(
orders = ordered_df,
group_var = 'NULL'
)
#### Grouped ####
grouped_vector <- function(
dataset,
label_flag1 = label_flag,
group_flag1 = group_flag
){
dataset %>%
dplyr::ungroup() %>%
dplyr::arrange(
#first arrange by groups
group_var = forcats::fct_relevel(
group_var,
group_flag1
),
#then arrange by labels, now in order of both
label = forcats::fct_relevel(
label,
label_flag1
)
) %>%
dplyr::mutate(
label = forcats::fct_inorder(label)
) %>%
dplyr::mutate(
group_var = forcats::fct_inorder(group_var)
) %>%
dplyr::mutate(
percent_label =  stringr::str_c(result * 100)
)
}
df_unordered <- data.frame(
group_var = c(
rep('Two', 4),
rep('One', 4),
rep('Three', 4)
),
label = c(
'Brand 2',
'Brand 1',
'Brand 4',
'Brand 3'
),
result = rep(c(5:2),3)
) %>% order_same(
orders = ordered_df,
group_var = 'NULL'
)
df <- data.frame(
test = c(
rep('One', 4),
rep('Two', 4),
rep('Three', 4)
),
label = c(
'Brand 1',
'Brand 2',
'Brand 3',
'Brand 4'
),
result = rep(c(1:4),3)
) %>%
create_group_var(group_var = test)
df <- data.frame(
test = c(
rep('One', 4),
rep('Two', 4),
rep('Three', 4)
),
label = c(
'Brand 1',
'Brand 2',
'Brand 3',
'Brand 4'
),
result = rep(c(1:4),3)
) %>%
create_group_var(group_var = 'test')
#### ***** Hidden Functions ***** ####
#### Create group_var ####
create_group_var <- function(dataset, group_var){
if(group_var != 'NULL'){
group_var_old <- dplyr::enquo(group_var)
dataset <- dataset %>%
dplyr::mutate(
group_var = !!group_var_old
)
}
dataset <- dataset
}
df <- data.frame(
test = c(
rep('One', 4),
rep('Two', 4),
rep('Three', 4)
),
label = c(
'Brand 1',
'Brand 2',
'Brand 3',
'Brand 4'
),
result = rep(c(1:4),3)
) %>%
create_group_var(group_var = 'test')
df <- data.frame(
test = c(
rep('One', 4),
rep('Two', 4),
rep('Three', 4)
),
label = c(
'Brand 1',
'Brand 2',
'Brand 3',
'Brand 4'
),
result = rep(c(1:4),3)
) %>%
create_group_var(group_var = test)
test_that("Create group var", {
df <- data.frame(
test = c(
rep('One', 4),
rep('Two', 4),
rep('Three', 4)
),
label = c(
'Brand 1',
'Brand 2',
'Brand 3',
'Brand 4'
),
result = rep(c(1:4),3)
)
df <- data.frame(
test = c(
rep('One', 4),
rep('Two', 4),
rep('Three', 4)
),
label = c(
'Brand 1',
'Brand 2',
'Brand 3',
'Brand 4'
),
result = rep(c(1:4),3)
) %>%
create_group_var(group_var = test)
)
df <- data.frame(
test = c(
rep('One', 4),
rep('Two', 4),
rep('Three', 4)
),
label = c(
'Brand 1',
'Brand 2',
'Brand 3',
'Brand 4'
),
result = rep(c(1:4),3)
) %>%
create_group_var(group_var = test)
#### Data ####
library(plyr)
library(tidyverse)
library(y2clerk)
library(orderlabel)
library(y2artisan)
library(mschart)
library(officer)
library(broom)
source('~/Dropbox (Y2 Analytics)/Y2 Analytics Team Folder/Projects/Qualtrics/Templates/Prior Templates/Colors TMF.R')
responses <- read_rds('~/Dropbox (Y2 Analytics)/Y2 Analytics Team Folder/Projects/Qualtrics/Optum NPS 2019/data/Optum 2019 tall data.rds')
responses$qnps <- as.numeric(responses$qnps)
names <- taking_names()
# Colors
QUAL_COLOR_DIVERGENT5
green_dark <- '#91C120'
green_mid <- '#BAD874'
blue_dark <- '#464E7E'
blue_mid <- '#8B90AE'
blue_light <- '#D1D3DF'
nps_green <- '#12a64d'
nps_yellow <- '#ffc630'
nps_red <- '#cf0d20'
overall_blue <- '#c5e1f8'
responses %>% freqs(characteristic)
responses <- responses %>%
mutate_at(
vars(
qconsistent_delivery,
qrelationships,
qquality,
qeasy_work,
qvalue,
qinnovation
),
list(
rev = ~mapvalues(
.,
from = c(1:5),
to = c(5:1)
)
)
)
responses <- responses %>%
mutate(
qincome = case_when(
Q42.3 <= 5 ~ Q42.3
),
csuite = case_when(
Q42.1 == 1 ~ 1,
T ~ 0
),
years_in_industry = Q42.2
)
responses <- responses %>%
mutate_at(
vars(
qsatisfaction,
qconsistent_delivery,
qrelationships,
qquality,
qeasy_work,
qvalue,
qinnovation
),
list(
~as.character(.)
)
) %>%
mutate_at(
vars(
qsatisfaction,
qconsistent_delivery,
qrelationships,
qquality,
qeasy_work,
qvalue,
qinnovation
),
list(
~case_when(
. == '1' ~ 'Extremely satisfied',
. == '2' ~ 'Somewhat satisfied',
. == '3' ~ 'Neither satisfied nor dissatisfied',
. == '4' ~ 'Dissatisfied',
. == '5' ~ 'Dissatisfied',
T ~ NA_character_
)
)
) %>%
mutate_at(
vars(
qsatisfaction,
qconsistent_delivery,
qrelationships,
qquality,
qeasy_work,
qvalue,
qinnovation
),
list(
~fct_relevel(
.,
'Extremely satisfied',
'Somewhat satisfied',
'Neither satisfied nor dissatisfied',
'Dissatisfied'
)
)
)
responses %>% freqs(qinnovation)
names <- taking_names()
#### hidden functions ####
other_rm_variable <- function(dataset){
if(any(names(dataset) == 'variable') == T){
dataset <- dataset %>%
dplyr::mutate(
variable = as.character(variable),
variable = dplyr::case_when(
stringr::str_detect(variable, stringr::regex('prefer not to', ignore_case = T)) == T ~ 'Prefer not to say',
stringr::str_detect(variable, stringr::regex('please specify', ignore_case = T)) == T ~ 'Other',
stringr::str_detect(variable, stringr::regex('none of the', ignore_case = T)) == T ~ 'None of the above',
variable == 'None' ~ 'None of the above',
T ~ variable
),
variable = stringr::str_remove_all(variable, ' \\(.*')
)
} else{
dataset <- dataset
}
}
other_rm <- function(
dataset,
remove = FALSE
) {
dataset <- other_rm_label(dataset)
dataset <- other_rm_variable(dataset)
dataset <- other_rm_group(dataset)
return(dataset)
}
#### hidden functions ####
other_rm_variable <- function(dataset){
if(any(names(dataset) == 'variable') == T){
dataset <- dataset %>%
dplyr::mutate(
variable = as.character(variable),
variable = dplyr::case_when(
stringr::str_detect(variable, stringr::regex('prefer not to', ignore_case = T)) == T ~ 'Prefer not to say',
stringr::str_detect(variable, stringr::regex('please specify', ignore_case = T)) == T ~ 'Other',
stringr::str_detect(variable, stringr::regex('none of the', ignore_case = T)) == T ~ 'None of the above',
variable == 'None' ~ 'None of the above',
T ~ variable
),
variable = stringr::str_remove_all(variable, ' \\(.*')
)
} else{
dataset <- dataset
}
}
other_rm_label <- function(dataset){
dataset <- dataset %>%
dplyr::mutate(
label = as.character(label),
label = dplyr::case_when(
stringr::str_detect(label, stringr::regex('prefer not to', ignore_case = T)) == T ~ 'Prefer not to say',
stringr::str_detect(label, stringr::regex('please specify', ignore_case = T)) == T ~ 'Other',
stringr::str_detect(label, stringr::regex('none of the', ignore_case = T)) == T ~ 'None of the above',
label == 'None' ~ 'None of the above',
T ~ label
),
label = stringr::str_remove_all(label, ' \\(.*')
)
}
other_rm_group <- function(dataset){
if(any(names(dataset) == 'group_var') == T){
dataset <- dataset %>%
dplyr::ungroup() %>%
dplyr::mutate(
group_var = as.character(group_var),
group_var = dplyr::case_when(
stringr::str_detect(group_var, stringr::regex('prefer not to', ignore_case = T)) == T ~ 'Prefer not to say',
stringr::str_detect(group_var, stringr::regex('please specify', ignore_case = T)) == T ~ 'Other',
stringr::str_detect(group_var, stringr::regex('none of the', ignore_case = T)) == T ~ 'None of the above',
group_var == 'None' ~ 'None of the above',
T ~ group_var
),
group_var = stringr::str_remove_all(group_var, ' \\(.*')
)
} else{
dataset <- dataset
}
}
#Set up the working directory to make package
library(devtools)
library(roxygen2)
#Process documentation
setwd('~/Documents/GitHub/orderlabel/')
document()
